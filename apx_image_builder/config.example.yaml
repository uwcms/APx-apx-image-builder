---
# The working directory.
# All relative paths will be relative to this.
# Default './'
working_directory: ./

# If working_directory is a relative path, should it be made relative to the
# location of this config file, instead of where the script was invoked from?
# WARNING: Symlinks will be resolved.
# Default: false
working_directory_config_relative: true

# User sources directory.
# Default: './sources'
sources_directory: ./sources

# Build directory.
# All work will be done in subdirectories of this folder.
# Subdirectories will be created for each builder.
# WARNING: Subdirectories will be deleted by cleanup operations.
# WARNING: When creating this directory, a `CACHEDIR.TAG` file will be created
#          to exclude this directory from backups.
# Default: './build'
build_directory: ./build

# Fetch cache directory.
# Any files that need to be retrieved from remote sources will be cached here.
# WARNING: Cached files from remote sources are always assumed to be up to date.
# WARNING: This will never be automatically cleaned.
# WARNING: When creating this directory, a `CACHEDIR.TAG` file will be created
#          to exclude this directory from backups.
fetch_cache_directory: ./fetch

# Output directory.
# Subdirectories will be created for each builder.
# WARNING: Subdirectories will be deleted by cleanup operations.
# Default: './output'
output_directory: ./output

# The series of ZYNQ part used.
# One of: 'zynq', 'zynqmp'
zynq_series: zynqmp

# Disabled builders
# These builders will be entirely disabled, as if they were not installed.
# If not defined, all included builders will be available.
# This may result in dependency resolution failures.
#disabled_builders:
#  - rootfs
#  - qspi
#  - jtag

# Builder-specific configuration.
builders:
  fsbl:
    # Extra arguments to add to `make`.
    extra_makeflags: ['CFLAGS="-DFSBL_DEBUG_INFO"']

    # The processor to generate the FSBL for.
    # This should normally be auto-detected.
    #cpu_id: ps7_cortexa9_0

    # The name of the app to generate.
    # This should normally be auto-detected.
    #app_name: zynq_fsbl

    # A list of user-supplied patches to apply before building.
    # These files should be in the sources directory.
    # They will be applied with `patch -tNp1`
    #patches: []
  pmu:
    # Extra arguments to add to `make`.
    #extra_makeflags: []

    # The processor to generate the PMU firmware for.
    # This should normally be auto-detected.
    #cpu_id: ps_pmu_0

    # The name of the app to generate.
    # This should normally be auto-detected.
    #app_name: zynqmp_pmufw

    # A list of user-supplied patches to apply before building.
    # These files should be in the sources directory.
    # They will be applied with `patch -tNp1`
    #patches: []

  atf:
    # The url to fetch the ATF source tarball.
    # file://... is valid.
    #atf_sourceurl: '...'

    # The ATF source tag to fetch.
    # Ignored if atf_sourceurl is set.
    atf_tag: xilinx-v2020.2

    # Extra arguments to add to `make`.
    # If you define this, you must include your own copy of the base values.
    #makeflags: ['CROSS_COMPILE=aarch64-none-elf-', 'PLAT=zynqmp', 'RESET_TO_BL31=1']

    # A list of user-supplied patches to apply before building.
    # These files should be in the sources directory.
    # They will be applied with `patch -tNp1`
    #patches: []

  dtb:
    # The url to fetch the device-tree generator source tarball.
    # file://... is valid.
    #dtg_sourceurl: '...'

    # The device-tree generator source tag to fetch.
    # Ignored if atf_sourceurl is set.
    dtg_tag: xilinx-v2020.2

    # The processor to generate the dtb for.
    # This should normally be auto-detected.
    #cpu_id: psu_cortexa53_0

    # A list of user-supplied patches to apply to the DTG repository before
    # building.
    # These files should be in the sources directory.
    # They will be applied with `patch -tNp1`
    #patches: []

  'u-boot':
    # The url to fetch the U-Boot source tarball.
    # file://... is valid.
    #uboot_sourceurl: '...'

    # The U-Boot source tag to fetch.
    # Ignored if uboot_sourceurl is set.
    uboot_tag: xilinx-v2020.2

    # The toolchain to use for building u-boot.
    # This should normally be auto-detected.
    #cross_compile: aarch64-none-elf-

    # A list of user-supplied patches to apply before building.
    # These files should be in the sources directory.
    # They will be applied with `patch -tNp1`
    #patches: []

  kernel:
    # The url to fetch the kernel source tarball.
    # file://... is valid.
    #kernel_sourceurl: '...'

    # The Xilinx Linux Kernel source tag to fetch.
    # Ignored if kernel_sourceurl is set.
    kernel_tag: xilinx-v2020.2

    # This defines what build profile to use for the kernel.
    # If unset, it will automatically choose based on the value of zynq_series.
    #   'arm':    Build for ZYNQ-7000 with default compiler.
    #   'arm64':  Build for ZynqMP with default compiler.
    #   'custom': Use custom settings.  You must supply ARCH= and CROSS_COMPILE= in extra_kbuild_args.
    #profile: arm64

    # Extra arguments to add to *ALL* kbuild invocations.
    # This is normally empty.
    extra_kbuild_args: ['-j8']

    # A list of user-supplied patches to apply before building.
    # These files should be in the sources directory.
    # They will be applied with `patch -tNp1`
    #patches: []

  rootfs:
    # The url to fetch the buildroot source tarball.
    # file://... is valid.
    #buildroot_sourceurl: '...'

    # The buildroot source version to fetch.
    # Ignored if buildroot_sourceurl is set.
    buildroot_version: 2021.02.3

    # A list of user-supplied patches to apply before building.
    # These files should be in the sources directory.
    # They will be applied with `patch -tNp1`
    #patches: []

  rpm:
    # The name of the image to be used in naming the firmware RPM.
    # Strongly Recommended: ${elm}-${blade} or ${elm}-${blade}-${majorbranch}
    image_name: board-standard

    # Firmware RPM core version.
    # The build timestamp will be appended to this as the release number.
    # Default: 1.0.0
    #
    # If you instead prefer to pull the RPM version string for your firmware
    # information from git tags, set rpm_version to 'git'. The builder will run
    # `git describe` and extract a valid semver from the end of the name of the
    # matched tag, discarding any prefixes.  Roughly, the tag name must match
    # ".*\bv?(?P<semver>...)".
    #rpm_version: 1.0.0
    #rpm_version: git

    # When using rpm_version 'git', you may wish to match only specific tags, or
    # provide different arguments to `git describe`.  `--long --dirty` are
    # automatic and required.  Default: []
    #rpm_version_git_describe_opts: ['--match', 'v*']

    # The path to `cd` to for `git describe`, relative to `working_directory`
    # configured above.
    #rpm_version_chdir: ./

    # You may wish to define your own RPM epoch (know what you're doing first).
    #rpm_version_epoch: null

  jtag:
    # The address to load the dtb into in memory.
    # You should normally keep the default.
    #dtb_address: 0x00100000

  qspi:
    # The address to load the dtb into in memory.
    # You should normally keep the default.
    #dtb_address: 0x00100000
